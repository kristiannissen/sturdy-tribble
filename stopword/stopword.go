package stopword

import (
	"log"
	"regexp"
	str "strings"
)

var trans map[string]string

var Words []string

func init() {
	log.Println("init")

	trans = map[string]string{"æ": "ae", "ø": "oe", "å": "aa"}

	Words = []string{
		"ad",
		"af",
		"aldrig",
		"alene",
		"alle",
		"allerede",
		"alligevel",
		"alt",
		"altid",
		"anden",
		"andet",
		"andre",
		"at",
		"bag",
		"bare",
		"begge",
		"bl.a.",
		"blandt",
		"blev",
		"blive",
		"bliver",
		"burde",
		"bør",
		"ca.",
		"da",
		"de",
		"dem",
		"den",
		"denne",
		"dens",
		"der",
		"derefter",
		"deres",
		"derfor",
		"derfra",
		"deri",
		"dermed",
		"derpå",
		"derved",
		"det",
		"dette",
		"dig",
		"din",
		"dine",
		"disse",
		"dit",
		"dog",
		"du",
		"efter",
		"egen",
		"ej",
		"eller",
		"ellers",
		"en",
		"end",
		"endnu",
		"ene",
		"eneste",
		"enhver",
		"ens",
		"enten",
		"er",
		"et",
		"f.eks.",
		"far",
		"fem",
		"fik",
		"fire",
		"flere",
		"flest",
		"fleste",
		"for",
		"foran",
		"fordi",
		"forrige",
		"fra",
		"fx",
		"få",
		"får",
		"før",
		"først",
		"gennem",
		"gjorde",
		"gjort",
		"god",
		"godt",
		"gør",
		"gøre",
		"gørende",
		"ham",
		"han",
		"hans",
		"har",
		"havde",
		"have",
		"hej",
		"hel",
		"heller",
		"helt",
		"hen",
		"hende",
		"hendes",
		"henover",
		"her",
		"herefter",
		"heri",
		"hermed",
		"herpå",
		"hos",
		"hun",
		"hvad",
		"hvem",
		"hver",
		"hvilke",
		"hvilken",
		"hvilkes",
		"hvis",
		"hvor",
		"hvordan",
		"hvorefter",
		"hvorfor",
		"hvorfra",
		"hvorhen",
		"hvori",
		"hvorimod",
		"hvornår",
		"hvorved",
		"i",
		"igen",
		"igennem",
		"ikke",
		"imellem",
		"imens",
		"imod",
		"ind",
		"indtil",
		"ingen",
		"intet",
		"ja",
		"jeg",
		"jer",
		"jeres",
		"jo",
		"kan",
		"kom",
		"komme",
		"kommer",
		"kun",
		"kunne",
		"lad",
		"langs",
		"lav",
		"lave",
		"lavet",
		"lidt",
		"lige",
		"ligesom",
		"lille",
		"længere",
		"man",
		"mand",
		"mange",
		"med",
		"meget",
		"mellem",
		"men",
		"mens",
		"mere",
		"mest",
		"mig",
		"min",
		"mindre",
		"mindst",
		"mine",
		"mit",
		"mod",
		"må",
		"måske",
		"ned",
		"nej",
		"nemlig",
		"ni",
		"nogen",
		"nogensinde",
		"noget",
		"nogle",
		"nok",
		"nu",
		"ny",
		"nyt",
		"når",
		"nær",
		"næste",
		"næsten",
		"og",
		"også",
		"okay",
		"om",
		"omkring",
		"op",
		"os",
		"otte",
		"over",
		"overalt",
		"pga.",
		"på",
		"samme",
		"sammen",
		"se",
		"seks",
		"selv",
		"selvom",
		"senere",
		"ser",
		"ses",
		"siden",
		"sig",
		"sige",
		"sin",
		"sine",
		"sit",
		"skal",
		"skulle",
		"som",
		"stadig",
		"stor",
		"store",
		"synes",
		"syntes",
		"syv",
		"så",
		"sådan",
		"således",
		"tag",
		"tage",
		"temmelig",
		"thi",
		"ti",
		"tidligere",
		"til",
		"tilbage",
		"tit",
		"to",
		"tre",
		"ud",
		"uden",
		"udover",
		"under",
		"undtagen",
		"var",
		"ved",
		"vi",
		"via",
		"vil",
		"ville",
		"vor",
		"vore",
		"vores",
		"vær",
		"være",
		"været",
		"øvrigt",
	}
}

func RemoveStopWords(text string) []string {
	var words []string = Tokenize(text)
	res := []string{}

	for _, w := range words {
		if isstopword(w) == false {
			res = append(res, w)
		}
	}

	return res
}

func isstopword(word string) bool {
	for _, w := range Words {
		if w == word {
			return true
		}
	}
	return false
}

func transliterate(word string) string {
	f := word[0:1]
	log.Println(f)
	if k, ok := trans[f]; ok {
		// Found trans
		return "hello " + k
	}
	return word
}

func Tokenize(text string) []string {
	var words []string = str.Split(text, " ")
	re := regexp.MustCompile(`[^a-z0-9]`)

	for i, w := range words {
		words[i] = re.ReplaceAllString(str.ToLower(w), "")
	}
	return words
}
